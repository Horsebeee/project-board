    ==  정리노트  ==

/*
    [ 접근제한자의 종류 및 설명 ]

    public : 제한 없음
    protected : 동일한 패키지, 파생클래스 에서만 접근 가능
    default : 동일한 패키지 내에서만 접근 가능
    private : 자기 자신의 클래스 내에서만 접근 가능
*/

/*
    [ == 와 equals 차이 ]

    == : 동등성 비교, 값이랑 주소값까지 비교.
    equals : 동등성 비교, 값 만 본다.
    hashCode : 객체를 실벽하는 Integer 값.
             객체가 가지고 있는 데이터를 특정 알고리즘을 적용해서 계싼된 정수 값을 hashCode 라고 함.
             사용하지 않는 이유 : 객체를 비교 할 때 드는 비용이 낮다.

    자바에서 2개의 객체를 비교 할 때는 equals() 를 사용 하는데,
    여러 객체를 비교 할 때는 equals() 를 사용하면 Integer 를 비교하는데 많은 시간이 소요된다.

*/

/*
    [ 정적 팩토리 메서드 (factory method pattern 중에 하나) ]

    정적 팩토리 메서드란 객체 생성 역할을 하는 클래스 메서드 라는 뜻.
    of 메서드를 이용해서 위에 있는 private 생성자를 직접적으로 사용해서 객체를 생성하게 하는 방법
    !!! 중요 : 무조건 static 으로 놓아야 한다. !!!

    장점
        1) static 이기 때문에 new 를 이용해서 생성자를 만들지 않아도 된다.
        2) return 을 가지고 있기 때문에 상속시 값을 확인할 수 있다. (하위 자료형 객체를 반환할 수 있다.)
        3) 중요 : 객체 생성을 캡슐화 할 수 있다.
*/

/*
    [ Java Collections FrameWork(JCF) ]

    Collection : 객체의 모음 (그룹)
                 자바가 제공하는 최상이 컬렉션 (인터페이스)
                 하이버네이트는 중복을 허용하고 순서를 보장하지 않는다고 가정.

    Set : 중복 허용 안함, 순서도 보장하지 않음
    List : 중복 허용 , 순서 있음
    Map : 키(Key), 값(Value)의 쌍으로 이루어진 데이터으 집합으로,
          순서는 유지되지 않으며 키(Key)의 중복을 허용하지 않으나 값(Value)의 중복은 허용한다.

    List 에 넣거나 List 에 있는 중복요소를 제거하거나 정렬 할 때 비교를 할 수 있어야 하기 때문에
    동일성, 동등성 비교를 할 수 있는 equals , hashcode 를 구현해야 한다.

    모든 데이터들을 비교해도 되지만, 다 불러와서 비교하면 느려질 수 있다.
    사실 id 만 같으면 두 엔티티가 같다는 뜻이니까 id 만 가지고 비교하는걸 구현
*/

/*
    [ JPA auditing ]

    JPA auditing : Audit은 감시하다, 감사하다라는 뜻으로 Spring Data JPA에서 시간에 대해서 자동으로 값을 넣어주는 기능
                   이거 하려면 config 파일이 별도로 있어야 한다.
*/